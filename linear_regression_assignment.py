# -*- coding: utf-8 -*-
"""Linear Regression Assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UdZOL8GEhXmpSdm_j4GmVMzSxmDrG176
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

plt.rcParams['figure.figsize'] = (20.0,10.0)

#Upload Data
from google.colab import files
uploaded = files.upload()

#Read data
import io
data = pd.read_csv(io.BytesIO(uploaded['heartrate.csv']))
print(data.shape)
data.head

#Collecting X and Y
X = data ['Heart Rate)'].values
Y = data ['Heart Attack'].values

#Mean X and Y
mean_x = np.mean(X)
mean_y = np.mean(Y)

#Total number of values
m = len(X)

#Using the formula to calculate b1 and b2
numer = 0
denom = 0
for i in range(m):
  numer += (X[i] - mean_x) * (Y[i] - mean_y)
  denom += (X[i] - mean_x) ** 2
# X and C to perform Y = MX + C
b1 = numer / denom # Heart Rate (X)
b0 = mean_y - (b1 * mean_x) # Heart Attack (C)

#Print coefficients
print(b1, b0)

#Plotting values and regression line

max_x = np.max(X) + 100
min_x = np.min(X) - 100

#Calculating line values x and y
x = np.linspace(min_x, max_x, 1000)
y = b0 + b1 * x

#Plotting Line
plt.plot(x, y, color='#58b970', label='Regression Line')

#Plotting Scatter Points
plt.scatter(X, Y, c='#ef5423', label='Scatter Plot')

plt.xlabel('Heart Rate')
plt.ylabel('Heart Attack')
plt.legend()
plt.show()

ss_t = 0  # Total sum of square
ss_r = 0  # Total sum of square of residuals
for i in range(m):
  y_pred = b0 + b1 * X[i]  
  ss_t += (Y[i] - mean_y) ** 2
  ss_r += (Y[i] - y_pred) ** 2
r2 = 1 - (ss_r/ss_t)  # R squared formula
print(r2)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# C Cannot use Rank 1 matrix in scikit learn
X = X.reshape((m,1))

# Creating Model
reg = LinearRegression()

# Fitting training data
reg = reg.fit(X, Y)

# Y Prediction
Y_pred = reg.predict(X)

# Calculating R2 Score

r2_score = reg.score(X, Y)
print(r2_score)